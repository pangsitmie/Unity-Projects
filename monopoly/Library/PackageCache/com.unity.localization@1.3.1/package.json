{
  "name": "com.unity.localization",
  "displayName": "Localization",
  "version": "1.3.1",
  "unity": "2019.4",
  "description": "Use the Localization package to easily configure localization settings for your application.\n\nAdd support for multiple languages and regional variants, including:\n\n• String localization: Set different strings to display based on locale. Use the Smart Strings feature to add logic to automatically replace specific strings, such as placeholders and plurals.\n• Asset localization: Use a different asset (such as a texture, model, or audio file) based on a locale.\n• Pseudo-localization: Test how your project will adapt to different localizations at an early stage, before adding your translations.\n• Import and export localization data to XLIFF, CSV and Google Sheets.\n\nAdd localization to your projects using the Localization package to help make your applications more accessible to a wider audience.",
  "keywords": [
    "localization",
    "locale",
    "language"
  ],
  "dependencies": {
    "com.unity.addressables": "1.19.19",
    "com.unity.nuget.newtonsoft-json": "2.0.0"
  },
  "repository": {
    "url": "https://github.cds.internal.unity3d.com/unity/com.unity.localization.git",
    "type": "git",
    "revision": "4e9c8be2874c54681f8862e30e4beec820bfa0e8"
  },
  "_upm": {
    "changelog": "### Added\n\n- Added **Localize Property** context menu to properties in the Inspector. This can be used as an alternative to the **Track Changes** option to manually add the property as a **Localized Property Variant**. The menu item **Remove Localized Property** removes properties. The menu item **Remove Localized Property Variant** removes a specific selected Locale's override. (LOC-358)\n- Added `RemoveTrackedProperty` to `TrackedObject`.\n- Added support to handle a locale that has multiple fallbacks defined. ([LOC-607](https://issuetracker.unity3d.com/product/unity/issues/guid/LOC-607))\n\n### Changed\n\n- Localized string and asset variants that are empty (no table or entry set) will no longer produce errors and will be ignored.\n- Replaced the `Locale Code` field in the Pseudo localization editor with a `Source Locale` field that only lets you select a locale in the project. (LOC-611)\n- Updated to Addressables `1.19.19`.\n\n### Deprecated\n\n- Replaced `Locale.GetFallback` with `Locale.GetFallbacks` in order to support multiple fallbacks per locale. ([LOC-607](https://issuetracker.unity3d.com/product/unity/issues/guid/LOC-607))\n\n### Fixed\n\n- Fixed `LocalesProvider.AddLocale` ignoring the locale being added when a potential fallback was already in the provider.\n- Fixed `LocalizedDatabase.GetTableAsync` creating a new operation each time when requesting a table that had not yet loaded. This would consume more memory than was necessary.\n- Fixed `LocalizedString` and `LocalizedAsset` not showing prefab overrides in the Inspector. (LOC-592)\n- Fixed `NullReferenceException` being thrown when applying property variants and the project locale was null. ([LOC-601](https://issuetracker.unity3d.com/issues/errors-are-thrown-in-play-mode-when-project-locale-identifier-is-not-set-in-localization-settings))\n- Fixed bug where calling `RefreshString`, when the loading operation had not completed, would cause `RefreshString` to execute twice.\n- Fixed build failures on Android Platform when System Language is used as Locale Source for Chinese (Simplified) & Chinese (Traditional). (LOC-681)\n- Fixed console errors and warnings when making changes in the Inspector and the project was not configured for localization.\n- Fixed duplicating of Addressable assets when importing a project with no library folder. (LOC-400)\n- Fixed errors when trying to create a table in the Packages directory. ([LOC-614](https://issuetracker.unity3d.com/issues/localization-assets-cannot-be-created-inside-embedded-packages))\n- Fixed fallback not working when the fallback had a missing table.\n- Fixed operations being released immediately in edit mode, this could cause data to be lost too soon. ([LOC-667](https://issuetracker.unity3d.com/issues/getlocalizedstring-returns-null-when-the-editor-is-not-in-play-mode))\n- Fixed operations sometimes being released too soon, which could cause them to be released before the yield on the operation had executed.\n- Fixed Psuedo locale editor using the incorrect field for the locale name.\n- Fixed Unity freezing when calling `WaitForCompletion` on a string operation that threw an exception during formatting. (LOC-630)\n- Improved automatic releasing of operations so that we no longer use `CompletedTypeless`, which generates GC.\n- Improved memory management to reduce the amount of garbage being generated by internal operations and adding/removing events. (LOC-571)\n- Reduced allocations when applying Localized Property variants and the string/asset operation was still loading. (LOC-480)"
  },
  "upmCi": {
    "footprint": "b0ddf941d6bbb71a440cdaa80b5d18aaa0827caf"
  },
  "samples": [
    {
      "displayName": "Creating Locales",
      "description": "This sample shows how to Locales including custom ones through script.",
      "path": "Samples~/CreatingLocales"
    },
    {
      "displayName": "Loading Strings",
      "description": "This sample shows multiple ways to fetch localized strings from the Localization system.",
      "path": "Samples~/LoadingStrings"
    },
    {
      "displayName": "Language Selection Menu (IMGUI)",
      "description": "This sample shows how to implement a simple language selection menu using IMGUI. The sample also includes an example of overriding the LocalesProvider in order to provide a custom list of available Locales.",
      "path": "Samples~/LocaleMenuIMGUI"
    },
    {
      "displayName": "Language Selection Menu (UGUI)",
      "description": "This sample shows how to implement a simple language selection menu using a UGUI Dropdown.",
      "dependencies": {
        "com.unity.ugui": "1.0.0"
      },
      "path": "Samples~/LocaleMenuUGUI"
    },
    {
      "displayName": "Smart Strings - Persistent Variables",
      "description": "These samples show how Persistent Variables can be used in Smart Strings and how custom variables can be created.",
      "dependencies": {
        "com.unity.ugui": "1.0.0"
      },
      "path": "Samples~/PersistentVariables"
    },
    {
      "displayName": "Preloading Screen",
      "description": "Preloading is a way to ensure that chosen Localization data is immediately available and does not require additional loading. This sample shows how to implement a loading screen to wait for preloading to complete.",
      "dependencies": {
        "com.unity.ugui": "1.0.0"
      },
      "path": "Samples~/PreloadingScreen"
    }
  ]
}
